<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Initialize variables
hp=100
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index=spr_player;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (hp&lt;=0)
{
    instance_destroy()
}
/*
//orientation
old_angle=image_angle
image_angle = point_direction(x, y, mouse_x, mouse_y);
if (place_meeting(x,y,obj_wall))
{
    image_angle=old_angle;
}
*/
/*

//player input
key_right=keyboard_check(vk_right) or keyboard_check(ord('D'));
key_left=-(keyboard_check(vk_left)or keyboard_check(ord('A')));
key_up=-(keyboard_check(vk_up) or keyboard_check(ord('W')));
key_down=keyboard_check(vk_down) or keyboard_check(ord('S'));

//react to inputs
//speed=max(speed-.1,0);



move_h=key_left+key_right;
move_v=key_up+key_down;
hsp=move_h * movespeed
vsp=move_v * movespeed

//x+=hsp
//y+=vsp



//horizontal collision
if (place_meeting(x+hsp,y,obj_wall))
{
    while(!place_meeting(x+sign(hsp),y,obj_wall)) x+=sign(hsp);
    hsp=0;
}
x+=hsp
speed=max(speed-.1,0);
       
//vertical collision
if (place_meeting(x,y+vsp,obj_wall))
{
    while(!place_meeting(x,y+sign(vsp),obj_wall)) y+=sign(vsp);
    vsp=0;
}
y+=vsp;
speed=max(speed-.1,0);
*/


//new collision attempt

//player input
key_right=keyboard_check(vk_right) or keyboard_check(ord('D'));
key_left=(keyboard_check(vk_left)or keyboard_check(ord('A')));
key_up=(keyboard_check(vk_up) or keyboard_check(ord('W')));
key_down=keyboard_check(vk_down) or keyboard_check(ord('S'));


if (key_up)
{
    if (place_meeting(x, y - 3, obj_wall))
    {
       while (!place_meeting(x, y - 1, obj_wall))
       {
            y--;
       }
    }
    else
        y -= 3;
}

if (key_left)
{
    if (place_meeting(x - 3, y, obj_wall))
    {
       while (!place_meeting(x - 1, y, obj_wall))
       {
            x--;
       }
    }
    else
        x -= 3;
}

if (key_down)
{
    if (place_meeting(x, y + 3, obj_wall))
    {
       while (!place_meeting(x, y + 1, obj_wall))
       {
            y++;
       }
    }
    else
        y += 3;
}

if (key_right)
{
    if (place_meeting(x + 3, y, obj_wall))
    {
       while (!place_meeting(x + 1, y, obj_wall))
       {
            x++;
       }
    }
    else
        x += 3;
}

//shooting
if mouse_check_button_pressed(mb_left)
{
    bullet=instance_create(x,y,obj_fist);
    bullet.direction=point_direction(x, y, mouse_x, mouse_y);
    bullet.image_angle=point_direction(x, y, mouse_x, mouse_y);
    bullet.speed=12;
};


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Angled

var angle = point_direction(x, y, mouse_x, mouse_y);

draw_sprite_ext(sprite_index, image_index, x, y, 1, 1, angle, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
